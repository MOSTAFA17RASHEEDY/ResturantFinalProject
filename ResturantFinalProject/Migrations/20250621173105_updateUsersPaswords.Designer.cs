// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResturantFinalProject.Data;

#nullable disable

namespace ResturantFinalProject.Migrations
{
    [DbContext(typeof(RestaurantDbContext))]
    [Migration("20250621173105_updateUsersPaswords")]
    partial class updateUsersPaswords
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-role",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "chef-role",
                            Name = "Chef",
                            NormalizedName = "CHEF"
                        },
                        new
                        {
                            Id = "waiter-role",
                            Name = "Waiter",
                            NormalizedName = "WAITER"
                        },
                        new
                        {
                            Id = "customer-role",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin-1",
                            RoleId = "admin-role"
                        },
                        new
                        {
                            UserId = "chef-1",
                            RoleId = "chef-role"
                        },
                        new
                        {
                            UserId = "waiter-1",
                            RoleId = "waiter-role"
                        },
                        new
                        {
                            UserId = "customer-1",
                            RoleId = "customer-role"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ResturantFinalProject.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c128ce0f-9942-43d8-8166-ae2e7448212e",
                            Email = "admin@restaurant.com",
                            EmailConfirmed = true,
                            FullName = "Admin User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@RESTAURANT.COM",
                            NormalizedUserName = "ADMIN@RESTAURANT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJoXvY9a7Yc1z4z5gK8qN3rXh2mW9pL8vT6uR5wZ2kM7nP4bQ9cF3jH6mY8vL2xK9Q==",
                            PhoneNumberConfirmed = false,
                            Role = 3,
                            SecurityStamp = "ADMIN-SECURITY-STAMP-12345",
                            TwoFactorEnabled = false,
                            UserName = "admin@restaurant.com"
                        },
                        new
                        {
                            Id = "chef-1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94a45fb0-cac0-468d-a938-945d09027906",
                            Email = "chef@restaurant.com",
                            EmailConfirmed = true,
                            FullName = "Chef User",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHEF@RESTAURANT.COM",
                            NormalizedUserName = "CHEF@RESTAURANT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJoXvY9a7Yc1z4z5gK8qN3rXh2mW9pL8vT6uR5wZ2kM7nP4bQ9cF3jH6mY8vL2xK9Q==",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "CHEF-SECURITY-STAMP-12345",
                            TwoFactorEnabled = false,
                            UserName = "chef@restaurant.com"
                        },
                        new
                        {
                            Id = "waiter-1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35970672-d173-412e-8147-93b346a261f9",
                            Email = "waiter@restaurant.com",
                            EmailConfirmed = true,
                            FullName = "Waiter User",
                            LockoutEnabled = false,
                            NormalizedEmail = "WAITER@RESTAURANT.COM",
                            NormalizedUserName = "WAITER@RESTAURANT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJoXvY9a7Yc1z4z5gK8qN3rXh2mW9pL8vT6uR5wZ2kM7nP4bQ9cF3jH6mY8vL2xK9Q==",
                            PhoneNumberConfirmed = false,
                            Role = 2,
                            SecurityStamp = "WAITER-SECURITY-STAMP-12345",
                            TwoFactorEnabled = false,
                            UserName = "waiter@restaurant.com"
                        },
                        new
                        {
                            Id = "customer-1",
                            AccessFailedCount = 0,
                            CartId = 1,
                            ConcurrencyStamp = "38f3b2aa-cb6d-4cac-a1ab-5b770d660f25",
                            Email = "customer@restaurant.com",
                            EmailConfirmed = true,
                            FullName = "Customer User",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@RESTAURANT.COM",
                            NormalizedUserName = "CUSTOMER@RESTAURANT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJoXvY9a7Yc1z4z5gK8qN3rXh2mW9pL8vT6uR5wZ2kM7nP4bQ9cF3jH6mY8vL2xK9Q==",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "CUSTOMER-SECURITY-STAMP-12345",
                            TwoFactorEnabled = false,
                            UserName = "customer@restaurant.com"
                        });
                });

            modelBuilder.Entity("ResturantFinalProject.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "customer-1",
                            IsDeleted = false,
                            UserId = "customer-1"
                        });
                });

            modelBuilder.Entity("ResturantFinalProject.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ResturantFinalProject.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsDeleted = false,
                            Name = "Pizza"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsDeleted = false,
                            Name = "Burgers"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsDeleted = false,
                            Name = "Drinks"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsDeleted = false,
                            Name = "Desserts"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsDeleted = false,
                            Name = "Pasta"
                        });
                });

            modelBuilder.Entity("ResturantFinalProject.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DailyOrderCount")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PreparationTimeMinutes")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DailyOrderCount = 0,
                            ImageUrl = "/images/margarita.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Margherita Pizza",
                            PreparationTimeMinutes = 15,
                            Price = 89.99m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DailyOrderCount = 0,
                            ImageUrl = "/images/pepperoni.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Pepperoni Pizza",
                            PreparationTimeMinutes = 17,
                            Price = 99.99m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DailyOrderCount = 0,
                            ImageUrl = "/images/cheeseburger.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Cheeseburger",
                            PreparationTimeMinutes = 10,
                            Price = 74.50m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DailyOrderCount = 0,
                            ImageUrl = "/images/chickenburger.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Chicken Burger",
                            PreparationTimeMinutes = 9,
                            Price = 69.99m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DailyOrderCount = 0,
                            ImageUrl = "/images/cocacola.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Coca-Cola",
                            PreparationTimeMinutes = 0,
                            Price = 19.99m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DailyOrderCount = 0,
                            ImageUrl = "/images/orangejuice.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Fresh Orange Juice",
                            PreparationTimeMinutes = 2,
                            Price = 24.99m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DailyOrderCount = 0,
                            ImageUrl = "/images/chocolatecake.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Chocolate Cake",
                            PreparationTimeMinutes = 5,
                            Price = 49.99m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DailyOrderCount = 0,
                            ImageUrl = "/images/icecream.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Ice Cream",
                            PreparationTimeMinutes = 0,
                            Price = 29.99m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DailyOrderCount = 0,
                            ImageUrl = "/images/spaghetti.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Spaghetti Bolognese",
                            PreparationTimeMinutes = 18,
                            Price = 94.99m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DailyOrderCount = 0,
                            ImageUrl = "/images/alfredo.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Alfredo Pasta",
                            PreparationTimeMinutes = 16,
                            Price = 89.99m
                        });
                });

            modelBuilder.Entity("ResturantFinalProject.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeliveredTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EstimatedDeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ReadyTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StatusUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedStaffId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ResturantFinalProject.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ResturantFinalProject.Models.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReservationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReservedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ResturantFinalProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ResturantFinalProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResturantFinalProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ResturantFinalProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResturantFinalProject.Models.Cart", b =>
                {
                    b.HasOne("ResturantFinalProject.Models.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("ResturantFinalProject.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ResturantFinalProject.Models.CartItem", b =>
                {
                    b.HasOne("ResturantFinalProject.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("ResturantFinalProject.Models.MenuItem", b =>
                {
                    b.HasOne("ResturantFinalProject.Models.Category", "Category")
                        .WithMany("MenuItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ResturantFinalProject.Models.Order", b =>
                {
                    b.HasOne("ResturantFinalProject.Models.ApplicationUser", "AssignedStaff")
                        .WithMany("AssignedOrders")
                        .HasForeignKey("AssignedStaffId");

                    b.HasOne("ResturantFinalProject.Models.ApplicationUser", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.Navigation("AssignedStaff");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ResturantFinalProject.Models.OrderItem", b =>
                {
                    b.HasOne("ResturantFinalProject.Models.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResturantFinalProject.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ResturantFinalProject.Models.ApplicationUser", b =>
                {
                    b.Navigation("AssignedOrders");

                    b.Navigation("Cart");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ResturantFinalProject.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ResturantFinalProject.Models.Category", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("ResturantFinalProject.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
