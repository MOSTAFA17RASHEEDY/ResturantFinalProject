@model ResturantFinalProject.ViewModels.DashboardViewModel
@using Microsoft.AspNetCore.Mvc.TagHelpers

@{
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
    ViewData["Title"] = "Dashboard";
}

<!-- Begin Page Content -->
<div class="container-fluid">

    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Dashboard</h1>
    </div>

    <!-- Content Row -->
    <div class="row">

        <!-- Monthly Sales Card -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Sales (Monthly)
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.MonthlySales.ToString("C")</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-calendar fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Total Orders Card -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Total Orders (Monthly)
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.TotalOrders</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-shopping-cart fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Average Order Value Card -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                Average Order Value
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.AverageOrderValue.ToString("C")</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Pending Orders Card -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                Pending Orders
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.OrderStatusDistribution[OrderStatus.Pending]</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-hourglass-half fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Content Row -->
    <div class="row">

        <!-- Area Chart -->
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Sales Trend (This Month)</h6>
                </div>
                <div class="card-body">
                    <div class="chart-area">
                        <canvas id="myAreaChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Pie Chart -->
        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Order Status Distribution</h6>
                </div>
                <div class="card-body">
                    <div class="chart-pie pt-4 pb-2">
                        <canvas id="Chart">
                    </div>
                </div>
                <div class="mt-4 text-center small">
                    @foreach (var status in Model.OrderStatusDistribution.Keys.OrderBy(k => k))
                    {
                        <span class="mr-2">
                            <i class="fas fa-circle" style="color: @(status switch
                                { OrderStatus.Pending => "#ffc107",  OrderStatus.Delivered => "#28a745", OrderStatus.Cancelled => "#dc3545", _ => "#6c757d" })"></i> @status
                        </span>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


<!-- /.container-fluid -->
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.4/dist/chart.umd.min.js"></script>
    <script>
        // Area Chart (Sales Trend)
        const ctxArea = document.getElementById('myAreaChart').getContext('2d');
        const salesTrendData = @Json.Serialize(Model.SalesTrend.Select(kvp => new { Date = kvp.Key.ToString("MMM dd"), Sales = kvp.Value }));
        new Chart(ctxArea, {
            type: 'line',
            data: {
                labels: salesTrendData.map(item => item.Date),
                datasets: [{
                    label: 'Daily Sales ($)',
                    data: salesTrendData.map(item => item.Sales),
                    borderColor: '#4e73df',
                    backgroundColor: 'rgba(78, 115, 223, 0.05)',
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: { title: { display: true, text: 'Date' } },
                    y: { title: { display: true, text: 'Sales ($)' }, beginAtZero: true }
                }
            }
        });

        // Pie Chart (Order Status Distribution)
        const ctxPie = document.getElementById('myPieChart').getContext('2d');
        const orderStatusData = @Json.Serialize(Model.OrderStatusDistribution.Select(kvp => new { Status = kvp.Key.ToString(), Count = kvp.Value }));
        new Chart(ctxPie, {
            type: 'pie',
            data: {
                labels: orderStatusData.map(item => item.Status),
                datasets: [{
                    data: orderStatusData.map(item => item.Count),
                    backgroundColor: ['#ffc107', '#17a2b8', '#28a745', '#dc3545', '#6c757d']
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { position: 'bottom' }
                }
            }
        });
    </script>
}